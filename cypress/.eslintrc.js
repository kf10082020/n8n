const sharedOptions = require('@n8n/eslint-config/shared');

/**
 * @type {import('@types/eslint').ESLint.ConfigData}
 */
module.exports = {
	// üì¶ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ + Cypress best practices
	extends: ['@n8n/eslint-config/base', 'plugin:cypress/recommended'],

	// üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ –º–æ–Ω–æ—Ä–µ–ø–æ
	...sharedOptions(__dirname),

	plugins: ['cypress'],

	env: {
		// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Cypress (cy, Cypress, etc.)
		'cypress/globals': true,
	},

	rules: {
		// üöß –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–¥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞)
		// üîï –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ e2e-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
		'@typescript-eslint/no-explicit-any': 'off',
		'@typescript-eslint/no-unsafe-argument': 'off',
		'@typescript-eslint/no-unsafe-assignment': 'off',
		'@typescript-eslint/no-unsafe-call': 'off',
		'@typescript-eslint/no-unsafe-member-access': 'off',
		'@typescript-eslint/no-unsafe-return': 'off',
		'@typescript-eslint/no-unused-expressions': 'off',
		'@typescript-eslint/no-use-before-define': 'off',
		'@typescript-eslint/promise-function-async': 'off',

		// ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
		'n8n-local-rules/no-uncaught-json-parse': 'off',

		// üß™ Cypress-specific best practices
		'cypress/no-assigning-return-values': 'warn',
		'cypress/no-unnecessary-waiting': 'warn',
		'cypress/unsafe-to-chain-command': 'warn',

		// üì¶ –†–∞–∑—Ä–µ—à–∞–µ–º devDependencies –≤ e2e-—Ç–µ—Å—Ç–∞—Ö
		'import/no-extraneous-dependencies': [
			'error',
			{
				devDependencies: ['**/cypress/**'],
				optionalDependencies: false,
			},
		],
	},
};
